package com.zetcode;

/*Generated by MPS */

import javax.swing.JFrame;
import java.awt.event.ActionListener;
import common.data.ApplicationState;
import common.ui.Board;
import javax.swing.JPanel;
import common.util.GameWindowListener;
import java.io.File;
import javax.swing.ImageIcon;
import common.util.ImageScaler;
import javax.swing.BoxLayout;
import java.awt.Dimension;
import javax.swing.Box;
import common.data.GameConstants;
import common.data.LevelDescription;
import java.awt.BorderLayout;
import common.ui.LearningPortfolio;
import common.ui.LevelSelection;
import common.ui.editor.TopicEditor;
import java.awt.Container;
import javax.swing.JButton;
import java.awt.Component;
import javax.swing.BorderFactory;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import java.awt.EventQueue;
import common.edu.Lesson;
import common.edu.Topic;
import java.util.ArrayList;
import common.edu.Question;
import common.edu.Fact;

public class MathSweeper extends JFrame implements ActionListener {
  private ApplicationState appState;
  public final String saveFileName = "minesweeper-save.ser";
  private String rootPath;

  private final int N_BUTTONS = 4;
  private final int BUTTON_WIDTH = 140;
  private final int BUTTON_HEIGHT = 40;
  private final int BUTTON_SPACING = 30;
  private final int TOP_PADDING = 50;
  private final int BOTTOM_PADDING = 50;
  private final int MENU_WIDTH = 400;
  private final int MENU_HEIGHT = TOP_PADDING + BOTTOM_PADDING + (BUTTON_SPACING + BUTTON_HEIGHT) * N_BUTTONS;

  private Board minesweeperBoard;
  private JPanel menu;
  private JPanel game;

  public MathSweeper() {
    setupAppState();
    addWindowListener(new GameWindowListener(appState, rootPath + saveFileName));
    showMenu();
  }
  public void setupAppState() {
    if (appState == null) {
      setupDefaultGameSettings();
    }
  }


  /**
   * To deprecate:
   */
  public void setupPaths() {
    File sourceLocation = new File(MathSweeper.class.getProtectionDomain().getCodeSource().getLocation().getPath());
    ImageIcon img;
    String imageName = "0.png";
    // Path for the IntelliJ minesweeper project's resources folder: 
    rootPath = sourceLocation.getPath() + "/";
    String path = rootPath + "resources/";
    img = new ImageIcon(path + imageName);
    // If the load fails, look for resources in parent folder: 
    if (img.getIconHeight() == -1 || img.getIconWidth() == -1) {
      rootPath = sourceLocation.getParent() + "/";
      path = rootPath + "resources/";
    }
    ImageScaler.ResourcesPath = path;
  }
  public void showMenu() {
    if (menu == null) {
      createMenu();
    }
    setContentPane(menu);
    setResizable(false);
    pack();
    setTitle("Minesweeper Menu");
    setLocationRelativeTo(null);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
  private void createMenu() {
    menu = new JPanel();
    menu.setLayout(new BoxLayout(menu, BoxLayout.Y_AXIS));
    menu.setPreferredSize(new Dimension(MENU_WIDTH, MENU_HEIGHT));
    menu.add(Box.createRigidArea(new Dimension(0, TOP_PADDING)));
    addButton(GameConstants.PLAY, "Play in learning mode", menu);
    addButton(GameConstants.EDIT, "Create and edit topics, lessons, levels", menu);
    addButton(GameConstants.LESSONS, "View found lessons", menu);
    addButton(GameConstants.EXIT, "Close application", menu);
    menu.add(Box.createRigidArea(new Dimension(0, BOTTOM_PADDING)));
  }
  private void showGame(LevelDescription level) {
    createGame(level);
    // else minesweeperBoard.newGame(true, true); 
    setContentPane(game);
    setResizable(false);
    pack();
    setTitle("Minesweeper");
    setLocationRelativeTo(null);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
  private void createGame(LevelDescription level) {
    game = new JPanel();
    game.setLayout(new BorderLayout());
    minesweeperBoard = new Board(this, level, this);
    game.add(minesweeperBoard);
    game.add(minesweeperBoard.statusbar, BorderLayout.SOUTH);
  }
  private void showLearningPortfolio() {
    LearningPortfolio portfolio = new LearningPortfolio(appState.topics, this);
    setTitle("Learning Portfolio");
    setContentPane(portfolio);
    pack();
  }
  private void showLevelSelection() {
    LevelSelection levelSelection = new LevelSelection(appState.levels, this);
    setContentPane(levelSelection);
    pack();
  }
  private void showTopicEditor() {
    TopicEditor topicEditor = new TopicEditor(appState, this, this);
    setContentPane(topicEditor);
    pack();
  }

  private void addButton(String text, String toolTip, Container container) {
    JButton button = new JButton(text);
    button.setAlignmentX(Component.CENTER_ALIGNMENT);
    button.setActionCommand(text);
    button.addActionListener(this);
    button.setToolTipText(toolTip);
    // Adding the button to a JPanel with a border layout so that all buttons are stretched to the same size. 
    JPanel borderPane = new JPanel(new BorderLayout());
    int sidePad = (MENU_WIDTH - BUTTON_WIDTH) / 2;
    borderPane.setBorder(BorderFactory.createEmptyBorder(0, sidePad, 0, sidePad));
    borderPane.add(button, BorderLayout.CENTER);
    container.add(borderPane);
    // Add bottom padding: 
    container.add(Box.createRigidArea(new Dimension(0, BUTTON_SPACING)));
  }
  public void actionPerformed(ActionEvent e) {
    // Manage level selection button presses: 
    try {
      int levelNo = Integer.parseInt(e.getActionCommand());
      showGame(appState.levels.get(levelNo));
      return;
    } catch (NumberFormatException ignored) {
    }
    // Manage menu and navigation buttons: 
    switch (e.getActionCommand()) {
      case GameConstants.PLAY:
        showLevelSelection();
        break;
      case GameConstants.TEST:
        JOptionPane.showMessageDialog(this, "This will turn on the 'test' game mode.");
        break;
      case GameConstants.LESSONS:
        showLearningPortfolio();
        break;
      case GameConstants.EXIT:
        System.out.println("Application exiting");
        ApplicationState.serializeAppState(appState, rootPath + saveFileName);
        System.exit(0);
        break;
      case GameConstants.MENU:
        showMenu();
        break;
      case GameConstants.EDIT:
        showTopicEditor();
        break;
      default:
    }
  }

  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      public void run() {
        {
          MathSweeper ex = new MathSweeper();
          ex.setVisible(true);
        }
      }
    });
  }
  public void setupDefaultGameSettings() {
    LevelDescription learningLevel;
    LevelDescription testLevel;
    Lesson lesson;
    Topic topic;
    ArrayList<Lesson> lessons;
    ArrayList<Topic> topics = new ArrayList();
    ArrayList<Question> questions;
    ArrayList<Fact> facts;
    ArrayList<LevelDescription> levels;

    levels = new ArrayList();
    int levelNo = 0;

    // Set up levels: 
    lessons = new ArrayList();
    // Lesson " Statistics introduction " and its level: 
    questions = new ArrayList();
    questions.add(new Question("What is the median of the following list? 6, 7, 1, 4, 9, 6, 3, 6.", new String[]{"3.5", "6.5", "5", "6"}, "6"));
    questions.add(new Question("What is the Range of the following list? 6, 7, 1, 4, 9, 6, 3, 6.", new String[]{"2", "6", "5", "8"}, "8"));
    questions.add(new Question("A student has the following grades: 5, 6, 7, ..., 10, 10. One grade is omitted. The median is 8. What grade was omitted?", new String[]{"7", "8", "10", "9"}, "9"));
    questions.add(new Question("A student has the following grades: .., 6, 7, 8, 10, 10. One grade is omitted. The range is 6. What grade was omitted?", new String[]{"2", "3", "5", "4"}, "4"));
    questions.add(new Question("A student has the following grades: 5, 6, 7, ..., 10, 10. One grade is omitted. The average is 7.5. What grade was omitted?", new String[]{"8", "9", "10", "7"}, "7"));

    facts = new ArrayList();
    facts.add(new Fact("Arithmetic average", "Arithmetic average (mean) is the sum of each number in a collection, divided by the size of the collection. For example, the average of 4 and 6 is 10 divided by 2, which equals 5."));
    facts.add(new Fact("Median", "The median is the middle value in the list of numbers. To find the median, your numbers have to be listed in numerical order from smallest to largest, so you may have to rewrite your list before you can find the median."));
    facts.add(new Fact("Range", "The range of a list of numbers is just the difference between the largest and smallest values."));
    facts.add(new Fact("Mode", "The mode is the value that occurs most often. If no number in the list is repeated, then there is no mode for the list."));
    facts.add(new Fact("Calculating a Mode", "There are a few approaches to calculating a mode. One is rewriting the list in an ordered manner and then counting number appearances. This is useful as you may also easily find the median and the range of such a list. Another way is to create a table, write values on the first line and their occurrences on the second. You may add more lines to the table to further analyze each value."));


    learningLevel = new LevelDescription();
    learningLevel.levelNo = levelNo++;
    learningLevel.setGameBase(9, 9, 10, 1);
    learningLevel.setItemCounts(1, 10, 3);
    learningLevel.startingReveals = 1;
    levels.add(learningLevel);

    lesson = new Lesson("Statistics introduction", facts, questions, learningLevel);
    lessons.add(lesson);
    // Lesson " Statistics introduction " and its level: 
    questions = new ArrayList();
    questions.add(new Question("What is the median of the following list? 6, 7, 1, 4, 9, 6, 3, 6.", new String[]{"3.5", "6.5", "5", "6"}, "6"));
    questions.add(new Question("What is the Range of the following list? 6, 7, 1, 4, 9, 6, 3, 6.", new String[]{"2", "6", "5", "8"}, "8"));
    questions.add(new Question("A student has the following grades: 5, 6, 7, ..., 10, 10. One grade is omitted. The median is 8. What grade was omitted?", new String[]{"7", "8", "10", "9"}, "9"));
    questions.add(new Question("A student has the following grades: .., 6, 7, 8, 10, 10. One grade is omitted. The range is 6. What grade was omitted?", new String[]{"2", "3", "5", "4"}, "4"));
    questions.add(new Question("A student has the following grades: 5, 6, 7, ..., 10, 10. One grade is omitted. The average is 7.5. What grade was omitted?", new String[]{"8", "9", "10", "7"}, "7"));

    facts = new ArrayList();
    facts.add(new Fact("Arithmetic average", "Arithmetic average (mean) is the sum of each number in a collection, divided by the size of the collection. For example, the average of 4 and 6 is 10 divided by 2, which equals 5."));
    facts.add(new Fact("Median", "The median is the middle value in the list of numbers. To find the median, your numbers have to be listed in numerical order from smallest to largest, so you may have to rewrite your list before you can find the median."));
    facts.add(new Fact("Range", "The range of a list of numbers is just the difference between the largest and smallest values."));
    facts.add(new Fact("Mode", "The mode is the value that occurs most often. If no number in the list is repeated, then there is no mode for the list."));
    facts.add(new Fact("Calculating a Mode", "There are a few approaches to calculating a mode. One is rewriting the list in an ordered manner and then counting number appearances. This is useful as you may also easily find the median and the range of such a list. Another way is to create a table, write values on the first line and their occurrences on the second. You may add more lines to the table to further analyze each value."));


    learningLevel = new LevelDescription();
    learningLevel.levelNo = levelNo++;
    learningLevel.setGameBase(16, 16, 40, 1);
    learningLevel.setItemCounts(3, 3, 4);
    learningLevel.startingReveals = 1;
    levels.add(learningLevel);

    lesson = new Lesson("Statistics introduction", facts, questions, learningLevel);
    lessons.add(lesson);
    // Lesson " Statistics introduction " and its level: 
    questions = new ArrayList();
    questions.add(new Question("What is the median of the following list? 6, 7, 1, 4, 9, 6, 3, 6.", new String[]{"3.5", "6.5", "5", "6"}, "6"));
    questions.add(new Question("What is the Range of the following list? 6, 7, 1, 4, 9, 6, 3, 6.", new String[]{"2", "6", "5", "8"}, "8"));
    questions.add(new Question("A student has the following grades: 5, 6, 7, ..., 10, 10. One grade is omitted. The median is 8. What grade was omitted?", new String[]{"7", "8", "10", "9"}, "9"));
    questions.add(new Question("A student has the following grades: .., 6, 7, 8, 10, 10. One grade is omitted. The range is 6. What grade was omitted?", new String[]{"2", "3", "5", "4"}, "4"));
    questions.add(new Question("A student has the following grades: 5, 6, 7, ..., 10, 10. One grade is omitted. The average is 7.5. What grade was omitted?", new String[]{"8", "9", "10", "7"}, "7"));

    facts = new ArrayList();
    facts.add(new Fact("Arithmetic average", "Arithmetic average (mean) is the sum of each number in a collection, divided by the size of the collection. For example, the average of 4 and 6 is 10 divided by 2, which equals 5."));
    facts.add(new Fact("Median", "The median is the middle value in the list of numbers. To find the median, your numbers have to be listed in numerical order from smallest to largest, so you may have to rewrite your list before you can find the median."));
    facts.add(new Fact("Range", "The range of a list of numbers is just the difference between the largest and smallest values."));
    facts.add(new Fact("Mode", "The mode is the value that occurs most often. If no number in the list is repeated, then there is no mode for the list."));
    facts.add(new Fact("Calculating a Mode", "There are a few approaches to calculating a mode. One is rewriting the list in an ordered manner and then counting number appearances. This is useful as you may also easily find the median and the range of such a list. Another way is to create a table, write values on the first line and their occurrences on the second. You may add more lines to the table to further analyze each value."));


    learningLevel = new LevelDescription();
    learningLevel.levelNo = levelNo++;
    learningLevel.setGameBase(30, 16, 99, 1);
    learningLevel.setItemCounts(3, 4, 5);
    learningLevel.startingReveals = 0;
    levels.add(learningLevel);

    lesson = new Lesson("Statistics introduction", facts, questions, learningLevel);
    lessons.add(lesson);

    // Test for the topic:  <node> 
    questions = new ArrayList();


    testLevel = new LevelDescription();
    testLevel.levelNo = levelNo++;
    testLevel.setGameBase(16, 16, 40, 1);
    testLevel.setItemCounts(3, 0, 10);
    testLevel.startingReveals = 1;
    levels.add(testLevel);

    topic = new Topic("Statistics", lessons, questions, testLevel);
    topics.add(topic);


    // Initialize application state: 
    appState = new ApplicationState(topics, levels);
  }

}
